<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on CrossForge</title>
    <link>CForgeHUB/</link>
    <description>Recent content in Introduction on CrossForge</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Nov 2022 21:49:43 +0100</lastBuildDate><atom:link href="CForgeHUB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Skybox</title>
      <link>CForgeHUB/concepts/basic/skybox/</link>
      <pubDate>Sun, 20 Nov 2022 12:00:55 +0100</pubDate>
      
      <guid>CForgeHUB/concepts/basic/skybox/</guid>
      <description>When creating seemingly endless worlds, one way of achieving this feeling is by using a concept called Skybox. In short a Skybox is either a cube or a sphere, so called skydome, that surrounds the world. The sky and other unreachable objects are projected onto the inner faces.
We use the SkyboxActor class when handling with skyboxes.
SkyboxActor m_Skybox; First we need to initialize the 6 Sides of the Cube. We use here the clear sky version as an example.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>CForgeHUB/first_steps/tutorial/</link>
      <pubDate>Sat, 22 Oct 2022 18:53:54 +0200</pubDate>
      
      <guid>CForgeHUB/first_steps/tutorial/</guid>
      <description>Windows 1) Installation First you have to download the Crossforge repository from GitHub. You can do this either through cloning or just downloading the according files. 2) Visual Studio: The prefered way to compile Crossforge under Windows is with the help of Visual Studio (A guide to install Visual Studio can be found here).
Due to the fact the Crossforge uses CMake and not the native Visual Studio Solutions, you need to update your Visual Studio installer (Here you can find more about CMake).</description>
    </item>
    
    <item>
      <title>Markdown Guide</title>
      <link>CForgeHUB/how_to_contribute/markdown_guide/</link>
      <pubDate>Sat, 22 Oct 2022 18:53:54 +0200</pubDate>
      
      <guid>CForgeHUB/how_to_contribute/markdown_guide/</guid>
      <description>Hugo uses markdown files. For this reason it is quite easy to fill the website with knowledge. The markdown guide should help you to get quickly into the file format. Below we have also listed the most usefull markdown syntax which we have used to create this site.
Create links To an external site A plain link This is quite easy. Either way you just paste the url: https://github.com/CrossForge/CrossForge.
In code this looks like this:</description>
    </item>
    
    <item>
      <title>Vectors</title>
      <link>CForgeHUB/graphics_lecture/vectors/</link>
      <pubDate>Sat, 22 Oct 2022 18:53:54 +0200</pubDate>
      
      <guid>CForgeHUB/graphics_lecture/vectors/</guid>
      <description>This chapter covers very basic mathematical concepts. If you know how to work with vectors, you can skip this chapter. Vectors and Points To first understand how computer graphics work we need to unserstand how we can use our 3D-Space. Imagine you have a point in the space and you want to get to another. Your points always have three coordinates - \(x,y,z\). So you want to get from \((x_1,y_1,z_1)\) to \((x_2,y_2,z_2)\).</description>
    </item>
    
    <item>
      <title>Multi Viewport</title>
      <link>CForgeHUB/concepts/basic/multi_viewport/</link>
      <pubDate>Sun, 20 Nov 2022 12:00:39 +0100</pubDate>
      
      <guid>CForgeHUB/concepts/basic/multi_viewport/</guid>
      <description>When viewing your creations, normally one viewport is all you need, but if needed Crossforge also supports multiple Viewports. Mainly there two ways of achieving multiple Viewports, the first way is by using one scenegraph and multiple virtual cameras, the second way is by using multiple scenegraphs with one camera setup.
1) Multiple scenegraphs
First off we begin with the way of using multiple scenegraphs, but why would you want to use this way?</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>CForgeHUB/how_to_contribute/shortcodes/</link>
      <pubDate>Sat, 22 Oct 2022 18:53:54 +0200</pubDate>
      
      <guid>CForgeHUB/how_to_contribute/shortcodes/</guid>
      <description>You may have noticed that some syntax can not be displayed via markdown (like equations). In the template some shortcodes are implemented to display notice boxes, mermaids (i.e. diagramms) and equations. Notice To emphasize certain facts, it is possible to use notice. These are special shortcodes which can be implemented quite easily.
This is a notice box
{{% notice note %}}This is a notice box{{% /notice %}} There are also info, tip and warning boxes.</description>
    </item>
    
    <item>
      <title>Transformations</title>
      <link>CForgeHUB/graphics_lecture/transformation/</link>
      <pubDate>Sat, 22 Oct 2022 18:53:54 +0200</pubDate>
      
      <guid>CForgeHUB/graphics_lecture/transformation/</guid>
      <description>In the last chapter we have covered basic concepts. For example, we can calculate vectors and now we want to move efficiently points with matrices. If you have not worked with matrices before, you can read about them more in detail here. Translation To easily move a vector we can use a translation matrix. The points are going to be moved by
$$\vec{v} = \begin{pmatrix} x_0 \\ y_0 \\ z_0 \end{pmatrix}\to T = \begin{bmatrix}1 &amp; 0 &amp; 0 &amp; x_0 \\0 &amp; 1 &amp; 0 &amp; y_0 \\0 &amp; 0 &amp; 1 &amp; z_0 \\0 &amp; 0 &amp; 0 &amp; 1\end{bmatrix}$$Homogeneous coordinates You may have noticed that this is a matrix \(\in \Reals^4\) (i.</description>
    </item>
    
    <item>
      <title>Scenegraph</title>
      <link>CForgeHUB/concepts/basic/scenegraph/</link>
      <pubDate>Sun, 20 Nov 2022 12:00:39 +0100</pubDate>
      
      <guid>CForgeHUB/concepts/basic/scenegraph/</guid>
      <description>A scenegraph is a data structur which allows inheritance of data manipulation (for instance rotation, scaling or transformation). It is often used in frameworks and engines to easily display objects. For example you can &amp;ldquo;connect&amp;rdquo; the tires with the rest a car. Therefore you can scale the tires diffently then the chassies. In this manner you can build your hole scene - thats why it is called scenegraph. Before we can connect models via a scenegraph, we have to create the root of the scenegraph itself - we can do that via a SGNTransformation-Node.</description>
    </item>
    
    <item>
      <title>Morphing</title>
      <link>CForgeHUB/concepts/advanced/morphing/</link>
      <pubDate>Sun, 20 Nov 2022 12:00:08 +0100</pubDate>
      
      <guid>CForgeHUB/concepts/advanced/morphing/</guid>
      <description>Automatically transforming a form/model to another through a seamless transition by geometric interpolation is called Morphing. There are various applications for this, the most typical ones are face animations, creating variations or combinations and some other simple animations. With Examples/exampleMorphTargetAnimation.hpp we will show you how Crossforge implements Morphing with face animations.
The basis of the Morph Target Animation consists of two classes: MorphTargetActor and MorphTargetAnimationController
MorphTargetActor m_Face; MorphTargetAnimationController m_MTController; For this to work we first need a base model, which is a male face.</description>
    </item>
    
    <item>
      <title>Skeletal Animation</title>
      <link>CForgeHUB/concepts/advanced/skeletal_animation/</link>
      <pubDate>Sun, 20 Nov 2022 12:01:15 +0100</pubDate>
      
      <guid>CForgeHUB/concepts/advanced/skeletal_animation/</guid>
      <description>Skeletal Animation, also called rigging, is appliable when an object consists of two parts: a surface and jointed, but individually rigid bodies called bones. The entirety of these bones is called a skeleton hence skeletal animation. Given the nature of these bones they can be animated seperately while still influencing other bones in their position and/or orientation, which is why the skeleton can also be seen as a hierarchy/tree, since transformation in a higher node/bone will also apply to the child nodes/bones.</description>
    </item>
    
    <item>
      <title>Sockets</title>
      <link>CForgeHUB/concepts/basic/sockets/</link>
      <pubDate>Sun, 20 Nov 2022 12:01:37 +0100</pubDate>
      
      <guid>CForgeHUB/concepts/basic/sockets/</guid>
      <description>If you want to send or receive data through an network, one way of achieving this is by using a Concept called Sockets. In short sockets function as an endpoint of a local network.
For that we use UDP and TCP
UDP TCP UDP uses ports to allocate data to the correct program, so it is connectionless TCP establishes a connection between two end points of a network connection (sockets) Lets see the basics of how to setup sockets.</description>
    </item>
    
    <item>
      <title>First Running Programm</title>
      <link>CForgeHUB/first_steps/firststart/</link>
      <pubDate>Fri, 02 Dec 2022 19:18:40 +0100</pubDate>
      
      <guid>CForgeHUB/first_steps/firststart/</guid>
      <description>Here we want to show you how you can start Crossforge and display your first programm. If you have not installed the framework and the dependencies, now is a good time to do so. First things first you have to open Crossforge. As you can see it is opened on a Windows machine, therefore Visual Studio is getting used. Navigate to the folder (not to the CMake file!). Click on it and then click on &amp;ldquo;choose folder&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>
